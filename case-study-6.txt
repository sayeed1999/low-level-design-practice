Background: 
A vehicle tracking system calculates the speed for various vehicle types 
(e.g., bikes, cars, airplanes).
The base Vehicle class defines basic speed-related methods, 
and subclasses such as Bike, Car, and Airplane may need different speed limit handling. 
The system should calculate speeds consistently across all vehicle types.

Question: 
How would you design the Vehicle and its subclasses to allow consistent speed calculations 
without needing different handling for each type?

Answer:
Pseudocode below: -

```csharp
public abstract class Vehicle
{
    // This is an abstract property that derived classes should set as per vehicle type.
    public abstract int SpeedLimit { get; protected set; }

    public float CalculateSpeed()
    {
        // TODO: do some calculation
        var speed = 40.0f; // lets assume it was the calculated speed

        if (speed > SpeedLimit) Notify();

        return speed;
    }

    private void Notify()
    {
        // TODO: some warning system!
    }
}

public class Bike : Vehicle
{
    public override int SpeedLimit { get; protected set; } = 40;
}

public class Car : Vehicle
{
    public override int SpeedLimit { get; protected set; } = 50;
}

public class Aeroplace : Vehicle
{
    public override int SpeedLimit { get; protected set; } = 200;
}
```

Here two OOP principles are used:-

1. Inheritance: Bike, Car, Aeroplane inherits Vehicle.
2. Runtime Polymorphism: SpeedLimit is overriden in runtime of the program.
